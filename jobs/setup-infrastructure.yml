parameters:
- name: TerraformWorkingDirectory
  default: ''
- name: AzureServiceConnectionName
  default: ''
- name: AzureResourceGroupName
  default: ''
- name: StorageAccountsName
  default: ''
- name: AzureContainerName
  default: ''
- name: AzureRmKeyTFState
  default: ''
- name: EnvironmentName
  default: 'Test'
- name: Location
  default: 'SouthEastAsia'
- name: FuncStorageAccountName
  default: ''
- name: AzureFunctionName
  default: ''

jobs:
- job: SetupInfrastructure${{ parameters.EnvironmentName }}
  steps:
  - task: TerraformInstaller@0
    displayName: "install"
    inputs:
      terraformVersion: '1.5.6'

  # Configure Azure Provider
  # This is optional but just for debugging purposes and test the AzureCLI task
  - task: AzureCLI@2
    condition: false
    inputs:
      azureSubscription: '${{ parameters.AzureServiceConnectionName }}'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az account show

  # Need to create a resource group for the solution to be deployed.
  - task: AzureCLI@2
    displayName: 'Create resource group ${{ parameters.AzureResourceGroupName }}'
    condition: false
    inputs:
      azureSubscription: '${{ parameters.AzureServiceConnectionName }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az group create -n ${{ parameters.AzureResourceGroupName }} -l ${{ parameters.Location }}

  # A storage account is needed to store the terraform statefile.
  - task: AzureCLI@2
    displayName: 'Create storage account ${{ parameters.StorageAccountsName }} for terraform state files'
    condition: false
    inputs:
      azureSubscription: '${{ parameters.AzureServiceConnectionName }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az storage account create -n ${{ parameters.StorageAccountsName }} -g ${{ parameters.AzureResourceGroupName }} -l  ${{ parameters.Location }} --sku Standard_LRS


  - task: TerraformTaskV3@3
    displayName: 'Terraform Init'
    inputs:
      workingDirectory: '${{ parameters.TerraformWorkingDirectory }}'
      provider: azurerm
      command: init
      commandOptions: '-lock=false'
      backendServiceArm: '${{ parameters.AzureServiceConnectionName }}'
      backendAzureRmResourceGroupName: '${{ parameters.AzureResourceGroupName }}'
      backendAzureRmStorageAccountName: '${{ parameters.StorageAccountsName }}'
      backendAzureRmContainerName: '${{ parameters.AzureContainerName }}'
      backendAzureRmKey: '${{ parameters.AzureRmKeyTFState }}'

  - task: TerraformTaskV3@3
    displayName: 'validate'
    inputs:
      workingDirectory: '${{ parameters.TerraformWorkingDirectory }}'
      provider: 'azurerm'
      command: 'validate'

  - task: TerraformTaskV3@3
    displayName: 'Terraform Plan'
    inputs:
      workingDirectory: '${{ parameters.TerraformWorkingDirectory }}'
      provider: 'azurerm'
      environmentServiceNameAzureRM: '${{ parameters.AzureServiceConnectionName }}'
      command: 'plan'
      commandOptions: '-var "environment=${{ parameters.EnvironmentName }}" -var "resource_group_name=${{ parameters.AzureResourceGroupName }}" -var "location=${{ parameters.Location }}" -var "functionapp_storage_account_name=${{ parameters.FuncStorageAccountName }}" -var "azurerm_windows_function_app_name=${{ parameters.AzureFunctionName }}" -input=false'

  - task: TerraformTaskV3@3
    displayName: 'Terraform Apply'
    inputs:
      workingDirectory: '${{ parameters.TerraformWorkingDirectory }}'
      provider: 'azurerm'
      command: 'apply'
      environmentServiceNameAzureRM: '${{ parameters.AzureServiceConnectionName }}'
      commandOptions: '-var "environment=${{ parameters.EnvironmentName }}" -var "resource_group_name=${{ parameters.AzureResourceGroupName }}" -var "location=${{ parameters.Location }}" -var "functionapp_storage_account_name=${{ parameters.FuncStorageAccountName }}" -var "azurerm_windows_function_app_name=${{ parameters.AzureFunctionName }}" -lock=false -auto-approve'
